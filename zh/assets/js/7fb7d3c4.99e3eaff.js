"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[282],{271:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>h});var c=r(5893),i=r(1151);const o={title:"Architecture Overview",slug:"/architecture-overview"},s=void 0,n={id:"architecture/architecture-overview",title:"Architecture Overview",description:"chia-architecture",source:"@site/docs/architecture/architecture-overview.md",sourceDirName:"architecture",slug:"/architecture-overview",permalink:"/zh/architecture-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/architecture/architecture-overview.md",tags:[],version:"current",frontMatter:{title:"Architecture Overview",slug:"/architecture-overview"},sidebar:"tutorialSidebar",previous:{title:"CLVM vs EVM",permalink:"/zh/clvm-vs-evm"},next:{title:"Full Nodes",permalink:"/zh/full-node-architecture"}},a={},h=[];function u(e){const t={img:"img",p:"p",...(0,i.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.p,{children:(0,c.jsx)(t.img,{alt:"chia-architecture",src:r(9877).Z+"",width:"1613",height:"1350"})}),"\n",(0,c.jsx)(t.p,{children:"The above diagram shows Chia's network architecture. A single machine can run more than one of these processes. In fact, the default configuration is to run four processes together: Farmer, Full Node, Harvester, and Wallet. Many farmers will also choose to run the Electron GUI and Pool processes. Additionally, a few farmers, especially those with multi-PiB farms, will choose to run a Timelord."}),"\n",(0,c.jsx)(t.p,{children:"Let's discuss each of these processes, and the protocols that connect them, separately."})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},9877:(e,t,r)=>{r.d(t,{Z:()=>c});const c=r.p+"assets/images/chia-network-architecture-8069f322a3b7e4ff7f79f137ea76b48d.png"},1151:(e,t,r)=>{r.d(t,{Z:()=>n,a:()=>s});var c=r(7294);const i={},o=c.createContext(i);function s(e){const t=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(o.Provider,{value:t},e.children)}}}]);