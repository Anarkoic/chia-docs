"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[4026],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4681:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Storage Benchmarks",slug:"/storage-benchmarks"},i=void 0,l={unversionedId:"resources/storage-benchmarks",id:"resources/storage-benchmarks",title:"Storage Benchmarks",description:"To have reproducible results the aim should be to limit caching effects. For that:",source:"@site/docs/resources/storage-benchmarks.md",sourceDirName:"resources",slug:"/storage-benchmarks",permalink:"/storage-benchmarks",draft:!1,editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/resources/storage-benchmarks.md",tags:[],version:"current",frontMatter:{title:"Storage Benchmarks",slug:"/storage-benchmarks"},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/faq"}},s={},c=[{value:"Install from sources",id:"install-from-sources",level:2},{value:"Run single threaded",id:"run-single-threaded",level:2},{value:"Run multi threaded",id:"run-multi-threaded",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Notes",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"To have reproducible results the aim should be to limit caching effects. For that:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Test data should be forced to storage and larger than flash drive's internal caches"),(0,a.kt)("li",{parentName:"ul"},"Block caches should be emptied between tests"))),(0,a.kt)("h1",{id:"fio"},(0,a.kt)("a",{parentName:"h1",href:"https://fio.readthedocs.io/en/latest/fio_doc.html"},"FIO")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sudo apt update"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"sudo apt install fio")),(0,a.kt)("p",null,'Save this file as a job file called "chia.fio" or whatever you want, and change filename to the path of the drive or RAID volume that you want to test'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[global]\nbs=128K\niodepth=256\ndirect=1\nioengine=libaio\ngroup_reporting\ntime_based\nname=chia\nlog_avg_msec=1000\nbwavgtime=1000\nfilename=/<yourRAID>/fiotest.tmp\nsize=100G\n\n[rd_qd_256_128k_1w]\nstonewall\nbs=128k\niodepth=256\nnumjobs=1\nrw=read\nruntime=60\nwrite_bw_log=seq_read_bw.log\n\n[wr_qd_256_128k_1w]\nstonewall\nbs=128k\niodepth=256\nnumjobs=1\nrw=write\nruntime=60\nwrite_bw_log=seq_write_bw.log\n")),(0,a.kt)("p",null,"run ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo fio chia.fio")),(0,a.kt)("h1",{id:"iozone"},(0,a.kt)("a",{parentName:"h1",href:"http://www.iozone.org/"},"IOzone")),(0,a.kt)("p",null,"This assumes RHEL stack Linux."),(0,a.kt)("h2",{id:"install-from-sources"},"Install from sources"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'sudo yum update -y\nsudo yum groupinstall "Development Tools" -y\ncd /opt\nwget http://www.iozone.org/src/current/iozone3_490.tar\ntar -xvf iozone3_490.tar\ncd iozone3_490/src/current\nmake linux-AMD64\n')),(0,a.kt)("h2",{id:"run-single-threaded"},"Run single threaded"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assume the test drive or volume is mounted as ",(0,a.kt)("strong",{parentName:"li"},"/chia/scratch/disk01")),(0,a.kt)("li",{parentName:"ul"},"-i 0=write/rewrite"),(0,a.kt)("li",{parentName:"ul"},"-i 1=read/re-read"),(0,a.kt)("li",{parentName:"ul"},"-i 2=random-read/write"),(0,a.kt)("li",{parentName:"ul"},"-i 8=random_mix"),(0,a.kt)("li",{parentName:"ul"},"-e  Include flush (fsync,fflush) in the timing calculations"),(0,a.kt)("li",{parentName:"ul"},"-r #  record size in Kb"),(0,a.kt)("li",{parentName:"ul"},"-s #  file size in GB"),(0,a.kt)("li",{parentName:"ul"},"-U  Mount point to remount between tests, this option will clear the block caches between tests. For this to work, mounting of the disk/volume needs to be configured in /etc/fstab.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/opt/iozone3_490/src/current/iozone -e -r 256 -s 32G -i 0 -i 1 -i 2 -i 8 -f /chia/scratch/disk01/tfile -U /chia/scratch/disk01\n")),(0,a.kt)("h2",{id:"run-multi-threaded"},"Run multi threaded"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assume the test drive or volume is mounted as ",(0,a.kt)("strong",{parentName:"li"},"/chia/scratch/disk01")),(0,a.kt)("li",{parentName:"ul"},"-I Use DIRECT I/O for all file operations. Tells the filesystem that all operations are to bypass the buffer cache and go directly to disk. This also will use VX_DIRECT on VxFS, and O_DIRECT on Linux, and directio() on Solaris.")))}p.isMDXComponent=!0}}]);