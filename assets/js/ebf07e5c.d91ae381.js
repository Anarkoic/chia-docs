"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[4763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?o.createElement(d,i(i({ref:t},h),{},{components:n})):o.createElement(d,i({ref:t},h))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:a,i[1]=r;for(var c=2;c<l;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const l={title:"Coin Selection",slug:"/coin-selection"},i=void 0,r={unversionedId:"reference-client/coin-selection",id:"reference-client/coin-selection",title:"Coin Selection",description:"Chia uses the Coin Set model of accounting, under which everything is a coin. When Chia wallets perform certain actions, they must select one or more coins to spend or reserve. (Coin selection is performed automatically by the software; the wallet's user is not involved.)",source:"@site/docs/reference-client/coin-selection.md",sourceDirName:"reference-client",slug:"/coin-selection",permalink:"/coin-selection",draft:!1,editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/reference-client/coin-selection.md",tags:[],version:"current",frontMatter:{title:"Coin Selection",slug:"/coin-selection"},sidebar:"tutorialSidebar",previous:{title:"Headless Node",permalink:"/headless-node"},next:{title:"Abstract",permalink:"/green-paper-abstract"}},s={},c=[{value:"Old algorithm -- largest first",id:"old-algorithm----largest-first",level:4},{value:"New algorithm -- knapsack",id:"new-algorithm----knapsack",level:4},{value:"Why use knapsack?",id:"why-use-knapsack",level:4}],h={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Chia uses the ",(0,a.kt)("a",{parentName:"p",href:"/coin-set-intro"},"Coin Set")," model of accounting, under which ",(0,a.kt)("em",{parentName:"p"},"everything")," is a coin. When Chia wallets perform certain actions, they must select one or more coins to spend or reserve. (Coin selection is performed automatically by the software; the wallet's user is not involved.)"),(0,a.kt)("p",null,"Actions that require coin selection include, but are not limited to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sending XCH to another wallet"),(0,a.kt)("li",{parentName:"ul"},"Locking up XCH in an Offer"),(0,a.kt)("li",{parentName:"ul"},"Creating a DID")),(0,a.kt)("p",null,"Sometimes, coin selection is a straight-forward task. For example, let's say Alice's wallet contains one coin worth 1 XCH, and she wants to send 0.5 XCH to Bob. Alice's wallet will handle this by:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Spending the 1-XCH coin, thereby unlocking its value"),(0,a.kt)("li",{parentName:"ol"},"Creating a coin worth 0.5 XCH and assigning it to Bob's wallet"),(0,a.kt)("li",{parentName:"ol"},'Creating another coin worth 0.5 XCH and assigning it to Alice\'s wallet as "change"')),(0,a.kt)("p",null,"In this case, there was only one coin to select, so the choice was obvious. Let's look at a more complex example."),(0,a.kt)("p",null,"Alice wants to send 0.5 XCH to Bob. In her wallet, she has:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.6 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.3 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.2 XCH")),(0,a.kt)("p",null,"Her wallet has two obvious choices in deciding which coin(s) to spend:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Spend the 0.6-XCH coin and create two new coins: one worth 0.5 XCH for Bob, and one worth 0.1 XCH for Alice's change."),(0,a.kt)("li",{parentName:"ol"},"Spend the coins worth 0.3 XCH and 0.2 XCH and create one new coin worth 0.5 XCH for Bob. No change coin is needed in this case.")),(0,a.kt)("p",null,"For option 1, Alice's wallet spends one coin and creates two coins -- 1 input, 2 outputs."),(0,a.kt)("p",null,"For option 2, Alice's wallet spends two coins and creates one coin -- 2 inputs, 1 output."),(0,a.kt)("p",null,"Which option will Alice's wallet choose?"),(0,a.kt)("h4",{id:"old-algorithm----largest-first"},"Old algorithm -- largest first"),(0,a.kt)("p",null,"Prior to version 1.4 of Chia's reference wallet, option 1 would have been chosen. This is because the reference wallet simply selected the largest coin available. If that coin didn't contain a sufficient amount of XCH to complete the transaction, the wallet added the next-largest coin, and so on until a sufficient amount was reached."),(0,a.kt)("p",null,"This algorithm was simple, but it created some frustrating outcomes. For example, let's say Alice wanted to create an offer to buy an NFT for 0.0001 XCH. In her wallet, she had:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.0001 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 10 XCH")),(0,a.kt)("p",null,"In this case, her wallet would have selected the 10-XCH coin. While waiting for her offer to be accepted, her 10-XCH coin would have been reserved, and only her 0.0001-XCH coin would have been available to be spent. This would have been all the more frustrating for Alice because she had a coin worth exactly the correct amount (0.0001 XCH), but it wasn't selected."),(0,a.kt)("h4",{id:"new-algorithm----knapsack"},"New algorithm -- knapsack"),(0,a.kt)("p",null,"Starting in version 1.4, Chia's reference wallet switched to using the same coin-selection algorithm as Bitcoin Core. This algorithm's basic outline goes like this:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Search for a single coin that matches the amount to be sent, including the transaction fee. If an exact match is found, use it."),(0,a.kt)("li",{parentName:"ol"},"Add up all of the coins smaller than the amount to be sent. If they match exactly, use them."),(0,a.kt)("li",{parentName:"ol"},"If the sum of the smaller coins is smaller than the amount to be sent, then an exact match is impossible. In this case, use the smallest coin that is larger than the amount to be sent."),(0,a.kt)("li",{parentName:"ol"},"Run the knapsack selection algorithm:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Sort all coins that are smaller than the amount to be sent, in descending order."),(0,a.kt)("li",{parentName:"ul"},"Traverse the list of sorted coins, and choose whether to select each individual coin, where each coin has a 50% probability of being selected."),(0,a.kt)("li",{parentName:"ul"},"As each new coin is selected, determine whether the sum of the selected coins is greater than or equal to the amount to be sent. If yes, then a valid solution has been found. If, and only if, this is the best valid solution so far (defined as the solution that comes closest to the amount to be sent), save it."),(0,a.kt)("li",{parentName:"ul"},"Replace the last coin selected with a smaller coin. If, an only if, this results in the best solution so far, save it."),(0,a.kt)("li",{parentName:"ul"},"Continue to traverse the list, using various combinations of selected coins in search of a better solution than the best one found so far. Do this for up to 1000 iterations."),(0,a.kt)("li",{parentName:"ul"},"If no valid solution has been found after 1000 iterations, re-traverse the list of smaller coins, this time selecting all of them. Once again, save only the best solution."),(0,a.kt)("li",{parentName:"ul"},"Perform up to 1000 iterations of this second traversal. If we exclude edge cases, such as when a wallet contains more than 1000 coins, a valid solution will be found -- the sum of the smaller coins is larger than the amount to be sent.")))),(0,a.kt)("p",null,"Let's review the scenario from the previous section and apply the new coin selection algorithm."),(0,a.kt)("p",null,"Alice wants to send 0.5 XCH to Bob. In her wallet, she has:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.6 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.3 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.2 XCH")),(0,a.kt)("p",null,"Under the new algorithm, Alice's wallet will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Search for a single coin that matches. None are found."),(0,a.kt)("li",{parentName:"ol"},"Add up all of the smaller coins. An exact match is found (0.3 + 0.2 = 0.5), so use it.")),(0,a.kt)("p",null,"Now let's say Alice wanted to include a transaction fee of 10 million mojos (0.00001 XCH). In this case, step 2 would fail to produce an exact match, so we would move to the next step:"),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"The sum of all smaller coins is still smaller than the amount to be sent, so the coin worth 0.6 XCH would be used.")),(0,a.kt)("p",null,"Let's look at a more complex example:"),(0,a.kt)("p",null,"Alice wants to send 0.5 XCH to Bob. She will include a transaction fee of 0.00001 XCH. In her wallet, she has:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.6 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.5 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.4 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.3 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.2 XCH")),(0,a.kt)("p",null,"Prior to version 1.4, the 0.6-XCH coin would have been selected. In versions 1.4 and later, the new algorithm is applied:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"No single coin matches the amount plus the fee (0.50001).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The sum of the smaller coins is 0.5 + 0.4 + 0.3 + 0.2 = 1.4, which does not equal 0.50001.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The sum from step 2 is larger than the amount to be sent.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Let's say the following coin selections occur:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"0.5 - not selected"),(0,a.kt)("li",{parentName:"ul"},"0.4 - selected"),(0,a.kt)("li",{parentName:"ul"},"0.3 - selected")),(0,a.kt)("p",{parentName:"li"},"At this point, we have a valid match: 0.4 + 0.3 > 0.50001. The final coin in Alice's wallet is worth 0.2 XCH. If this coin is selected, it will replace the coin worth 0.3 XCH, making the best match 0.4 + 0.2. If this coin is not selected, a better match will not be found."))),(0,a.kt)("p",null,"This example shows two interesting facets of the new algorithm:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"It is not always possible to predict which coins will be selected."),(0,a.kt)("li",{parentName:"ol"},"The best possible match is not guaranteed to be found.")),(0,a.kt)("h4",{id:"why-use-knapsack"},"Why use knapsack?"),(0,a.kt)("p",null,"This algorithm is used in both Bitcoin Core and Chia's reference wallet because it provides a good balance between accuracy and computational intensity. It is also clearly superior in many cases."),(0,a.kt)("p",null,"Let's revisit the example from the top of this document:"),(0,a.kt)("p",null,"Alice wants to create an offer to buy an NFT for 0.0001 XCH. In her wallet, she has:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One coin worth 0.0001 XCH"),(0,a.kt)("li",{parentName:"ul"},"One coin worth 10 XCH")),(0,a.kt)("p",null,"Under the old algorithm, the 10-XCH coin would have been selected and reserved for the offer. This would have left Alice with a spendable balance of 0.0001 XCH while the offer was pending."),(0,a.kt)("p",null,"Under the new algorithm, the 0.0001-XCH coin is selected and reserved. Alice still has 10 XCH available to spend."),(0,a.kt)("p",null,"Because of scenarios such as this, wallet developers in Chia's community are recommended to use the knapsack algorithm for coin selection."),(0,a.kt)("p",null,"For more information, see:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"https://blog.summerofbitcoin.org/coin-selection-for-dummies-part-3/"},"blog")," explaining the knapsack algorithm"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf"},"technical details")," of the knapsack algorithm used by Bitcoin Core, including edge cases not mentioned here"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Chia-Network/chia-blockchain/blob/main/chia/wallet/coin_selection.py"},"source code")," Chia uses for coin selection")))}p.isMDXComponent=!0}}]);